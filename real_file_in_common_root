this is: real_file_in_common_root

and it pulled nicely into multiple other repos as a submodule
so now we are testing out a quick edit to its content

editing the symlink from main1 did not work earlier but maybe now?

now being test-edited by vim/CLI (after pycharm did not work)
editing the real file (after symlink did not work)

editing either the symlink or the real file works fine via vim/CLI
simply being in the directory is enough for git to use the correct repo 

this is not smooth (yet?) in pycharm and github desktop 

but I learned from the vim/CLI approach that to avoid conflict,
we need to git fetch and then git pull from within each (real or referenced) repo.
then and only then can we have meaningful git status output or git commit success.

so... after a good deal of testing, it seems pycharm is not part of the problem;
    github desktop looks like the culprit.
using the command line git binary, all is well.
    no problems at all.
a cursory review of the desktop.github.com open issues shows immature support
    for referencing an external repo (they call that "submodule") and working with it


-- coming back Mon 29 Jul to revisit this and find out what will be our best approach

1. editing real_file_in_common_root in PyCharm, from within the common repo area

(had to do a fast forward on one project, in order to see the changes in common)
(other project had detached head trouble; did 'git checkout master' to recover)
(seems a 'git submodule update --remote --merge' 
	might have been in order, instead of 'git pull --recurse-submodules')

2. editing real_file_in_common_root with vim, from within the m1 project

3. editing real_file_in_common_root with vim, from within the m2 project



-- OK, here's how this works (smoothly and reliably):

Step 1: git submodule update --remote --merge
before you make any changes, be sure you have the latest and greatest

Step 2: from within a project that references the common code, edit a file

Step 3: git status
see the changes not yet staged

Step 4: git diff
see the details of what changed

Step 5: git add ___
stage the changes

Step 6: git submodule update --remote --merge
find out in advance about anyone else's changes to the repo while you were editing

Step 7: git commit

Step 8: git push


Step 9 from within the common code repo: git pull
Step 9 from within any other project referencing the common code: git pull --recurse-submodules


Step 10 (verify): git status
If the common code's "git status" reports that it is in a detached HEAD state:
    Step 11: git checkout master
    Step 12: git pull

